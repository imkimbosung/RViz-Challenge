#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import math
import tf
import os
import cv2
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import LaserScan, Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from cv_bridge import CvBridge, CvBridgeError


class detect_parking():
    def __init__(self):
        rospy.loginfo('parking')
        self.pub_cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size = 5)
        self.pub_parking_finish = rospy.Publisher('/detect/parking_lot_stamped', UInt8, queue_size=1)

        self.sub_parking_start = rospy.Subscriber('/detect/parking_lot_order', UInt8, self.obstacle , queue_size=1)


        self.LIDAR_ERR = 0.05
      #  self.obstacle(1)

        self.is_step_parking = False

        loop_rate = rospy.Rate(10)
       # while not rospy.is_shutdo
       #     if self.is_step_parking ==

       #         self.obsta
              # self.t

       #     loop_rate.sleep()

       # rospy.on_shutdown(self.shutdown)


        self.direction = None

    def cbparking(self,msg):
        print('sub working parking')
        self.is_step_parking = True


    def stparking(self, msg):

        if msg == 'LEFT':
           self.fnGo()
           rospy.sleep(5)
           self.fnStop()

           self.fnBack()
           rospy.sleep(5)
           self.fnStop()

           self.fnLeft()
           finish = 'out'

        elif msg == 'RIGHT':
            self.fnGo()
            rospy.sleep(5)
            self.fnStop()

            self.fnBack()
            rospy.sleep(5)
            self.fnStop()

            self.fnRight()
            finish = 'out'

        if finish == 'out':
            self.fnGo()
            rospy.sleep(14)
            self.fnStop()
            self.fnLeft()
            self.pub_parking_finish.publish(1)


    def go_to(self):
        self.fnStop()

        self.fnGo()
        rospy.sleep(3)
        self.fnStop()

        self.fnLeft()


    def obstacle(self, msg):

       # self.go_to()

        self.twist = Twist()
        while not rospy.is_shutdown():
            self.get_scan()

            if not self.scan_left:
                rospy.loginfo(' None obstacle ')
                pass

            elif not self.scan_right:
                  pass


            elif min(self.scan_left) < 0.30:
                self.twist.linear.x = 0.0
                self.twist.angular.z = 0.0
                self.pub_cmd_vel.publish(self.twist)
                rospy.loginfo('find the obstacle to ==LEFT== Stop!')
                rospy.sleep(1)
                self.fnRight()

                self.stparking('RIGHT')
                break

            elif min(self.scan_right) < 0.30:
                self.twist.linear.x = 0.0
                self.twist.angular.z = 0.0
                self.pub_cmd_vel.publish(self.twist)
                rospy.loginfo('find the obstacle to ==RIGHT== Stop!')
                rospy.sleep(1)
                self.fnLeft()

                self.stparking('LEFT')
                break

            else:
                self.twist.linear.x = 0.08
                self.twist.angular.z = 0.0
                rospy.loginfo('distance of the obstacle left : %f', min(self.scan_left))
                rospy.loginfo('distance of the obstacle rifhg : %f', min(self.scan_right))

                self.pub_cmd_vel.publish(self.twist)

    def get_scan(self):
        msg = rospy.wait_for_message("scan", LaserScan)
        self.scan_left = []
        self.scan_right = []

        for i in range(360):
            if i >= 70 and i <= 110:
                if msg.ranges[i] >= self.LIDAR_ERR:
                    self.scan_left.append(msg.ranges[i])
            elif i >=250 and i<=290:
                if msg.ranges[i] >= self.LIDAR_ERR:
                    self.scan_right.append(msg.ranges[i])
                    
    def fnLeft(self):
        self.current_theta = 0
        self.lastError = 0.0
        self.desired_theta = self.current_theta + 1.57

        self.err_theta = self.current_theta - self.desired_theta

        rospy.loginfo("Left_Turn")
        Kp = 0.8

        Kd = 0.03

        angular_z = Kp * self.err_theta + Kd * (self.err_theta - self.lastError)
        self.lastError = self.err_theta

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)

        rospy.loginfo("angular_z : %f", angular_z)

        rospy.sleep(1.22)
        self.fnStop()



    def fnRight(self):
        self.current_theta = 0
        self.lastError = 0.0
        self.desired_theta = self.current_theta - 1.57

        self.err_theta = self.current_theta - self.desired_theta

        rospy.loginfo("Right_Turn")
        Kp = 0.8

        Kd = 0.03

        angular_z = Kp * self.err_theta + Kd * (self.err_theta - self.lastError)
        self.lastError = self.err_theta

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)

        rospy.loginfo("angular_z : %f", angular_z)

        rospy.sleep(1.22)
        self.fnStop()


    def fnGo(self):
        twist = Twist()
        twist.linear.x = 0.07
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)


    def fnBack(self):
        twist = Twist()
        twist.linear.x = -0.07
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)


    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

        rospy.sleep(1)



    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_parking_l')
    node = detect_parking()
    node.main()
