#!/usr/bin/env python
# -*- coding: utf-8 -*-

################################################################################
# Copyright 2018 ROBOTIS CO., LTD.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
################################################################################

# Author: Leon Jung, Gilbert

import rospy
import numpy as np
import math
import os
import cv2
from enum import Enum
from std_msgs.msg import UInt8
from sensor_msgs.msg import Image, CompressedImage
from cv_bridge import CvBridge, CvBridgeError

class DetectSign():
    def __init__(self):
	print("init")
        self.fnPreproc()

        self.sub_image_type = "raw" # you can choose image type "compressed", "raw"
        self.pub_image_type = "compressed" # you can choose image type "compressed", "raw"

        if self.sub_image_type == "compressed":
            # subscribes compressed image
            self.sub_image_original = rospy.Subscriber('/detect/image_input/compressed', CompressedImage, self.cbFindTrafficSign, queue_size = 1)
        elif self.sub_image_type == "raw":
            # subscribes raw image
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindTrafficSign, queue_size = 1)

        self.pub_traffic_sign = rospy.Publisher('/detect/traffic_sign', UInt8, queue_size=1)

        if self.pub_image_type == "compressed":
            # publishes traffic sign image in compressed type
            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size = 1)
        elif self.pub_image_type == "raw":
            # publishes traffic sign image in raw type
            self.pub_image_traffic_sign = rospy.Publisher('/detect/image_output', Image, queue_size = 1)

        self.cvBridge = CvBridge()

        #change the order
        self.TrafficSign = Enum('TrafficSign', 'idle lane light parking level tunnel threeway etc obstacle left right')

        self.counter = 1
        self.number = 0


    def fnPreproc(self):
        # Initiate SIFT detector
        self.sift = cv2.xfeatures2d.SIFT_create()

        dir_path = os.path.dirname(os.path.realpath(__file__))
        dir_path = dir_path.replace('turtlebot3_autorace_detect/nodes', 'turtlebot3_autorace_detect/')
        dir_path += 'file/detect_sign/'

        self.img2 = cv2.imread(dir_path + 'obstacle.png',0)         # trainImage1
        self.img3 = cv2.imread(dir_path + 'parking.png',0)      # trainImage2
        self.img4 = cv2.imread(dir_path + 'tunnel.png',0)       # trainImage3
	#self.img5 = cv2.imread(dir_path + 'right.png',0)	
	#self.img6 = cv2.imread(dir_path + 'left.png',0)
	#self.img7 = cv2.imread(dir_path + 'stop.png',0)
	#self.img8 = cv2.imread(dir_path + 'Threeway.png',0)
        # replace to origin remote pc's path
	#imgfile1 = '/home/devel/Downloads/image/obstacle.png'
	#imgfile2 = '/home/devel/Downloads/image/parking.png'
	#imgfile3 = '/home/devel/Downloads/image/tunnel.png'
       # imgfile4 = 'home/devel/Downloads/image/left.png'
       # imgfile5 = 'home/devel/Downloads/image/right.png'
       # imgfile6 = 'home/devel/Downloads/image/tunnel.png'
       # imgfile7 = 'home/devel/Downloads/image/obstacle.png'

       # self.img2 = cv2.imread(imgfile1,cv2.IMREAD_COLOR)
       # self.img3 = cv2.imread(imgfile2,cv2.IMREAD_COLOR)
       # self.img4 = cv2.imread(imgfile3,cv2.IMREAD_COLOR)
       # self.img5 = cv2.imread(imgfile4,cv2.IMREAD_COLOR)
       # self.img6 = cv2.imread(imgfile5,cv2.IMREAD_COLOR)
       # self.img7 = cv2.imread(imgfile6,cv2.IMREAD_COLOR)
       # self.img8 = cv2.imread(imgfile7,cv2.IMREAD_COLOR)


        self.kp2, self.des2 = self.sift.detectAndCompute(self.img2,None)
        self.kp3, self.des3 = self.sift.detectAndCompute(self.img3,None)
        self.kp4, self.des4 = self.sift.detectAndCompute(self.img4,None)
        #self.kp5, self.des5 = self.sift.detectAndCompute(self.img5,None)
        #self.kp6, self.des6 = self.sift.detectAndCompute(self.img6,None)
        #self.kp7, self.des7 = self.sift.detectAndCompute(self.img7,None)
        #self.kp8, self.des8 = self.sift.detectAndCompute(self.img8,None)

        FLANN_INDEX_KDTREE = 0
        index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)
        search_params = dict(checks = 50)

        self.flann = cv2.FlannBasedMatcher(index_params, search_params)

    def fnCalcMSE(self, arr1, arr2):
            squared_diff = (arr1 - arr2) ** 2
            sum = np.sum(squared_diff)
            num_all = arr1.shape[0] * arr1.shape[1] #cv_image_input and 2 should have same shape
            err = sum / num_all
            return err

    def cbFindTrafficSign(self, image_msg):
        # drop the frame to 1/5 (6fps) because of the processing speed. This is up to your computer's operating power.
        if self.counter % 3 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        if self.sub_image_type == "compressed":
            #converting compressed image to opencv image
            np_arr = np.fromstring(image_msg.data, np.uint8)
            cv_image_input = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        elif self.sub_image_type == "raw":
            cv_image_input = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

	#cv_image_input = cv_image_input[0:320,0:120]

        MIN_MATCH_COUNT = 1
        MIN_MSE_DECISION = 30000

        # find the keypoints and descriptors with SIFT
        kp1, des1 = self.sift.detectAndCompute(cv_image_input,None)

        matches2 = self.flann.knnMatch(des1,self.des2,k=2)
        matches3 = self.flann.knnMatch(des1,self.des3,k=2)
        matches4 = self.flann.knnMatch(des1,self.des4,k=2)
        #matches5 = self.flann.knnMatch(des1,self.des5,k=2)
        #matches6 = self.flann.knnMatch(des1,self.des6,k=2)
        #matches7 = self.flann.knnMatch(des1,self.des7,k=2)
        #matches8 = self.flann.knnMatch(des1,self.des8,k=2)

        

        image_out_num = 1

        good2 = []
        for m,n in matches2:
            if m.distance < 0.7*n.distance:
                good2.append(m)
	#print("obstacle len : %f",len(good2))
        if len(good2)>MIN_MATCH_COUNT+6:
	    #print("len(good2)")
            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good2 ]).reshape(-1,1,2)
            dst_pts = np.float32([ self.kp2[m.trainIdx].pt for m in good2 ]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matchesMask2 = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
	    #mse -= 40000
	    print("obstcale :  %d", mse)
            #if mse < MIN_MSE_DECISION:
	    if 80000 < mse < 130000:
	    #if 89000< mse < 130000: 
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.obstacle.value

                if self.number == 0:

                   self.pub_traffic_sign.publish(msg_sign)

                   print('detect_sign = ', msg_sign.data)

                   rospy.loginfo("TrafficSign : obstacle")
 
                   image_out_num = 2

                   self.number = 1

        else:
            matchesMask2 = None

        good3 = []
        for m,n in matches3:
            if m.distance < 0.7*n.distance:
                good3.append(m)
	#print("parking len : %f", len(good3))
        if len(good3)>MIN_MATCH_COUNT+7:
            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good3 ]).reshape(-1,1,2)
            dst_pts = np.float32([ self.kp3[m.trainIdx].pt for m in good3 ]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matchesMask3 = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
	    print("parking : %d",mse)
            #mse -= 20000
            #if mse < MIN_MSE_DECISION:
	    if 52000 < mse < 57000 : 
	    #if mse > 50000 : 
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.parking.value


                if self.number == 1:

                   self.pub_traffic_sign.publish(msg_sign)
  
                   print('detect_sign = ', msg_sign.data)

                   rospy.loginfo("TrafficSign : parking")

                   image_out_num = 3

                   self.number = 2

        else:
            matchesMask3 = None

        good4 = []
        for m,n in matches4:
            if m.distance < 0.7*n.distance:
                good4.append(m)
        if len(good4)>MIN_MATCH_COUNT:
            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good4 ]).reshape(-1,1,2)
            dst_pts = np.float32([ self.kp4[m.trainIdx].pt for m in good4 ]).reshape(-1,1,2)

            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
            matchesMask4 = mask.ravel().tolist()

            mse = self.fnCalcMSE(src_pts, dst_pts)
	    #mse -= 15000
	    #print(mse)
            if mse < 7:
                msg_sign = UInt8()
                msg_sign.data = self.TrafficSign.tunnel.value

 
                if self.number == 2:
                   self.pub_traffic_sign.publish(msg_sign)

                    #print('detect_sign = ', msg_sign.data)

                   rospy.loginfo("TrafficSign : tunnel")

                   image_out_num = 4

        else:
            matchesMask4 = None

#        good5 = []
#        for m,n in matches5:
#            if m.distance < 0.7*n.distance:
#                good5.append(m)
#        if len(good5)>MIN_MATCH_COUNT:
#            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good5 ]).reshape(-1,1,2)
#            dst_pts = np.float32([ self.kp5[m.trainIdx].pt for m in good5 ]).reshape(-1,1,2)
#            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
#            matchesMask5 = mask.ravel().tolist()

#            mse = self.fnCalcMSE(src_pts, dst_pts)
#            if mse < MIN_MSE_DECISION:
#                msg_sign = UInt8()
#                msg_sign.data = self.TrafficSign.right.value

#                self.pub_traffic_sign.publish(msg_sign)

#                rospy.loginfo("TrafficSign : right")

#                image_out_num = 5

#        else:
#            matchesMask5 = None

#        good6 = []
#        for m,n in matches6:
#            if m.distance < 0.7*n.distance:
#                good6.append(m)

#        if len(good6)>MIN_MATCH_COUNT:
#            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good6 ]).reshape(-1,1,2)
#            dst_pts = np.float32([ self.kp6[m.trainIdx].pt for m in good6 ]).reshape(-1,1,2)

#            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
#            matchesMask6 = mask.ravel().tolist()

#            mse = self.fnCalcMSE(src_pts, dst_pts)
#            if mse < MIN_MSE_DECISION:
#                msg_sign = UInt8()
#                msg_sign.data = self.TrafficSign.left.value

#                self.pub_traffic_sign.publish(msg_sign)

#                rospy.loginfo("TrafficSign : left")

#                image_out_num = 6

#        else:
#            matchesMask6 = None

#        good7 = []
#        for m,n in matches7:
#            if m.distance < 0.7*n.distance:
#                good7.append(m)

#        if len(good7)>MIN_MATCH_COUNT:
#            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good7 ]).reshape(-1,1,2)
#            dst_pts = np.float32([ self.kp7[m.trainIdx].pt for m in good7 ]).reshape(-1,1,2)
#            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
#            matchesMask7 = mask.ravel().tolist()

#            mse = self.fnCalcMSE(src_pts, dst_pts)
            #mse -= 50000
#            if mse < MIN_MSE_DECISION:
#                msg_sign = UInt8()
#                msg_sign.data = self.TrafficSign.stop.value
#                self.pub_traffic_sign.publish(msg_sign)
#                rospy.loginfo("TrafficSign : stop")

#                image_out_num = 7

#        else:
#            matchesMask7 = None

#        good8 = []
#        for m,n in matches8:
#            if m.distance < 0.7*n.distance:
#                good8.append(m)

#        if len(good8)>MIN_MATCH_COUNT:
#            src_pts = np.float32([ kp1[m.queryIdx].pt for m in good8 ]).reshape(-1,1,2)
#            dst_pts = np.float32([ self.kp8[m.trainIdx].pt for m in good8 ]).reshape(-1,1,2)

#            M, mask = cv2.findHomography(src_pts, dst_pts, cv2.RANSAC,5.0)
#            matchesMask8 = mask.ravel().tolist()

#            mse = self.fnCalcMSE(src_pts, dst_pts)
#            mse -= 50000
#            if mse < MIN_MSE_DECISION:
#                msg_sign = UInt8()
#                msg_sign.data = self.TrafficSign.threeway.value

#                self.pub_traffic_sign.publish(msg_sign)

#                rospy.loginfo("TrafficSign : threeway")

#                image_out_num = 8

#        else:
#            matchesMask8 = None




        if image_out_num == 1:
            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image_input, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(cv_image_input, "bgr8"))

        elif image_out_num == 2:
            draw_params2 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask2, # draw only inliers
                            flags = 2)

            final2 = cv2.drawMatches(cv_image_input,kp1,self.img2,self.kp2,good2,None,**draw_params2)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final2, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final2, "bgr8"))

        elif image_out_num == 3:
            draw_params3 = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask3, # draw only inliers
                            flags = 2)

            final3 = cv2.drawMatches(cv_image_input,kp1,self.img3,self.kp3,good3,None,**draw_params3)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final3, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final3, "bgr8"))

        elif image_out_num == 4:
            draw_params4 = dict(matchColor = (255,0,0), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask4, # draw only inliers
                            flags = 2)

            final4 = cv2.drawMatches(cv_image_input,kp1,self.img4,self.kp4,good4,None,**draw_params4)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final4, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final4, "bgr8"))
        elif image_out_num == 5:
            draw_params5 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask5, # draw only inliers
                            flags = 2)

            final5 = cv2.drawMatches(cv_image_input,kp1,self.img5,self.kp5,good5,None,**draw_params5)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final5, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final5, "bgr8"))
        elif image_out_num == 6:
            draw_params6 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask6, # draw only inliers
                            flags = 2)

            final6 = cv2.drawMatches(cv_image_input,kp1,self.img6,self.kp6,good6,None,**draw_params6)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final6, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final6, "bgr8"))
        elif image_out_num == 7:
            draw_params7 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask7, # draw only inliers
                            flags = 2)

            final7 = cv2.drawMatches(cv_image_input,kp1,self.img7,self.kp7,good2,None,**draw_params7)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final7, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final7, "bgr8"))

        elif image_out_num == 8:
            draw_params8 = dict(matchColor = (0,0,255), # draw matches in green color
                            singlePointColor = None,
                            matchesMask = matchesMask8, # draw only inliers
                            flags = 2)

            final8 = cv2.drawMatches(cv_image_input,kp1,self.img8,self.kp8,good2,None,**draw_params8)

            if self.pub_image_type == "compressed":
                # publishes traffic sign image in compressed type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_compressed_imgmsg(final8, "jpg"))

            elif self.pub_image_type == "raw":
                # publishes traffic sign image in raw type
                self.pub_image_traffic_sign.publish(self.cvBridge.cv2_to_imgmsg(final8, "bgr8"))


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_sign')
    node = DetectSign()
    node.main()
