#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import tf
import numpy as np
import math
from enum import Enum
from math import radians, copysign, sqrt, pow, pi, atan2
from tf.transformations import euler_from_quaternion
from sensor_msgs.msg import LaserScan
from geometry_msgs.msg import Twist, Point, Quaternion
from std_msgs.msg import UInt8, Float64
from nav_msgs.msg import Odometry

class ControlObstacle():
    def __init__(self):
        rospy.loginfo('control obstacle == init == start')
        #Subscriber
        self.sub_obstacle_start = rospy.Subscriber('/control/obstacle_order', UInt8, self.cbObstacleStart, queue_size = 1)

        #Publisher
        self.pub_cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size = 5)
        self.pub_obstacle_step = rospy.Publisher('/control/obstacle', UInt8, queue_size = 1)
        self.pub_obstacle_finished = rospy.Publisher('/control/obstacle_finished', UInt8, queue_size = 1)
        self.pub_max_vel = rospy.Publisher('/control/max_vel', Float64, queue_size = 1)

        self.pub_start_obstacle = rospy.Publisher('/start/obstacle', Float64, queue_size=1)

        self.LIDAR_ERR = 0.05

        self.is_step_obstacle = False #default = False
        self.finish_obstacle = False

        self.StepOfObstacle = Enum('StepOfObstacle','start_scan detect_obstacle_1 detect_obstacle_2 go_to_scan')


        self.current_step_of_obstacle = self.StepOfObstacle.start_scan.value

        rospy.sleep(1)

        ##(core_controller) if you run to first start obstacle , self.start to run
        #self.start()

        ##just test without core_controller
        # self.test()

        loop_rate = rospy.Rate(10)
        while not rospy.is_shutdown():
            if self.is_step_obstacle == True:

                self.fnObstacle()
              # self.test()

            loop_rate.sleep()


    def start(self):
        self.pub_start_obstacle.publish(1)

    def test(self):

        self.is_step_obstacle = True
        self.fnObstacle()


    def cbObstacleStart(self, obstacle_start_msg):
        rospy.loginfo('obstacle sub working ')
        self.is_step_obstacle = True
        self.pub_max_vel.publish(0.08)
       # self.fnObstacle()

    def fnObstacle(self):
        print('start fnobstacle')
        if self.current_step_of_obstacle == self.StepOfObstacle.start_scan.value:
            if self.is_step_obstacle == True:
                rospy.loginfo('Start to Obstacle scan')
                self.obstacle()

                self.is_step_obstacle = False

                self.current_step_of_obstacle = self.StepOfObstacle.detect_obstacle_1.value
                self.pub_obstacle_step.publish(1)
                rospy.sleep(1)

            #    self.test()

        elif self.current_step_of_obstacle == self.StepOfObstacle.detect_obstacle_1.value:
              if self.is_step_obstacle == True:
                 rospy.loginfo('Detect to Obstacle-1')

                 self.fnLeft()
                 print('fnleft finish')
                 self.fnGo()
                 print('fngo')
                 rospy.sleep(2.6)

                 self.fnStop()

                 self.fnRight()
                 self.is_step_obstacle = False

                 self.current_step_of_obstacle = self.StepOfObstacle.go_to_scan.value
                 self.test()
                # self.cbObstacleStart(1)
                # self.fnObstacle()


        elif self.current_step_of_obstacle == self.StepOfObstacle.go_to_scan.value:
              if self.is_step_obstacle == True:
                  rospy.loginfo('go to scan')

                  self.obstacle()

                  self.is_step_obstacle = False

                  self.current_step_of_obstacle = self.StepOfObstacle.detect_obstacle_2.value
                  self.test()
                 # self.cbObstacleStart(1)
                 # self.fnObstacle()


        elif self.current_step_of_obstacle == self.StepOfObstacle.detect_obstacle_2.value:
              if self.finish_obstacle == False:
                  rospy.loginfo('Detect to Obstacle-2')

                  self.fnRight()
                  self.fnGo()
                  rospy.sleep(2.2)

                  self.fnStop()

                  self.fnLeft()
                  self.is_step_obstacle = False
                  self.finish_obstacle = True
                  ##
                  self.fnGo()
                  rospy.sleep(2)
                  self.fnStop()

                  self.pub_obstacle_finished.publish(2)



    def get_scan(self):
        msg = rospy.wait_for_message("scan", LaserScan)
        self.scan_filter = []
        for i in range(360):
            if i <= 15 or i > 335:
                if msg.ranges[i] >= self.LIDAR_ERR:
                    self.scan_filter.append(msg.ranges[i])

    def obstacle(self):
        self.twist = Twist()
        rospy.sleep(1)
        self.fnGo()
        while True:

            self.get_scan()

            if not self.scan_filter:
                pass

            elif min(self.scan_filter) < 0.33:
                  self.pub_max_vel.publish(0.0)
                  rospy.loginfo('Stop!')
                  # stop to find obstacle
                  break

            else:
                rospy.loginfo('distance of the obstacle : %f', min(self.scan_filter))
                pass


    def fnLeft(self):
        self.current_theta = 0
        self.lastError = 0.0
        self.desired_theta = self.current_theta + 1.57

        self.err_theta = self.current_theta - self.desired_theta

        rospy.loginfo("Left_Turn")
        Kp = 0.8

        Kd = 0.03

        angular_z = Kp * self.err_theta + Kd * (self.err_theta - self.lastError)
        self.lastError = self.err_theta

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)

        rospy.loginfo("angular_z : %f", angular_z)

        rospy.sleep(1)
        self.fnStop()

    def fnRight(self):
        self.current_theta = 0
        self.lastError = 0.0
        self.desired_theta = self.current_theta - 1.57

        self.err_theta = self.current_theta - self.desired_theta

        rospy.loginfo("Right_Turn")
        Kp = 0.8

        Kd = 0.03

        angular_z = Kp * self.err_theta + Kd * (self.err_theta - self.lastError)
        self.lastError = self.err_theta

        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = -angular_z
        self.pub_cmd_vel.publish(twist)

        rospy.loginfo("angular_z : %f", angular_z)

        rospy.sleep(1.1)
        self.fnStop()


    def fnGo(self):
        twist = Twist()
        twist.linear.x = 0.12
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)



    def fnStop(self):
        twist = Twist()
        twist.linear.x = 0
        twist.linear.y = 0
        twist.linear.z = 0
        twist.angular.x = 0
        twist.angular.y = 0
        twist.angular.z = 0
        self.pub_cmd_vel.publish(twist)

        rospy.sleep(1)

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('control_obstacle')
    node = ControlObstacle()
    node.main()
