#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import math
import tf
import os 
import cv2
from enum import Enum
from std_msgs.msg import UInt8, Float64, String
from sensor_msgs.msg import LaserScan, Image, CompressedImage
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from cv_bridge import CvBridge, CvBridgeError


class test():
    def __init__(self):
        rospy.loginfo('test file start')
        self.pub_cmd_vel = rospy.Publisher('cmd_vel', Twist, queue_size = 5)


        self.LIDAR_ERR = 0.05
        self.obstacle()

        self.direction = None

    def obstacle(self):
        self.twist = Twist()
        while not rospy.is_shutdown():
            self.get_scan()

            if not self.scan_left:
                rospy.loginfo(' None obstacle ')
                pass

            elif not self.scan_right:
                  pass


            elif min(self.scan_left) < 0.30:
                self.twist.linear.x = 0.0
                self.twist.angular.z = 0.0
                self.pub_cmd_vel.publish(self.twist)
                rospy.loginfo('find the obstacle to ==LEFT== Stop!')
                break

            elif min(self.scan_right) < 0.30:
                self.twist.linear.x = 0.0
                self.twist.angular.z = 0.0
                self.pub_cmd_vel.publish(self.twist)
                rospy.loginfo('find the obstacle to ==RIGHT== Stop!')
                break

            else:
                self.twist.linear.x = 0.08
                self.twist.angular.z = 0.0
                rospy.loginfo('distance of the obstacle left : %f', min(self.scan_left))
                rospy.loginfo('distance of the obstacle rifhg : %f', min(self.scan_right))

                self.pub_cmd_vel.publish(self.twist)

    def get_scan(self):
        msg = rospy.wait_for_message("scan", LaserScan)
        self.scan_left = []
        self.scan_right = []

        for i in range(360):
            if i >= 70 and i <= 110:
                if msg.ranges[i] >= self.LIDAR_ERR:
                    self.scan_left.append(msg.ranges[i])
            elif i >=250 and i<=290:
                if msg.ranges[i] >= self.LIDAR_ERR:
                    self.scan_right.append(msg.ranges[i])


    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('test')
    node = test()
    node.main()
